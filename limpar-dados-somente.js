
const { db, run, all, get } = require('./database');
const fs = require('fs');
const path = require('path');

const limparApenasGlosas = async () => {
    console.log('üßπ INICIANDO LIMPEZA SELETIVA - MANTENDO CONFIGURA√á√ïES...\n');
    
    try {
        // 1. Fazer backup antes de limpar (seguran√ßa)
        console.log('üì¶ Criando backup de seguran√ßa...');
        const { createBackup } = require('./database');
        const backupPath = await createBackup();
        console.log(`‚úÖ Backup criado: ${backupPath}\n`);

        // 2. Desabilitar foreign keys temporariamente
        await run('PRAGMA foreign_keys = OFF');
        console.log('üîì Foreign keys desabilitadas\n');

        // 3. Verificar dados antes da limpeza
        console.log('üìä DADOS ANTES DA LIMPEZA:');
        const stats = await get(`
            SELECT 
                (SELECT COUNT(*) FROM aihs) as total_aihs,
                (SELECT COUNT(*) FROM movimentacoes) as total_movimentacoes,
                (SELECT COUNT(*) FROM glosas) as total_glosas,
                (SELECT COUNT(*) FROM atendimentos) as total_atendimentos,
                (SELECT COUNT(*) FROM logs_acesso) as total_logs_acesso,
                (SELECT COUNT(*) FROM logs_exclusao) as total_logs_exclusao,
                (SELECT COUNT(*) FROM usuarios) as total_usuarios,
                (SELECT COUNT(*) FROM profissionais) as total_profissionais,
                (SELECT COUNT(*) FROM tipos_glosa) as total_tipos_glosa
        `);
        
        console.log(`   - AIHs: ${stats.total_aihs} registros`);
        console.log(`   - Movimenta√ß√µes: ${stats.total_movimentacoes} registros`);
        console.log(`   - Glosas: ${stats.total_glosas} registros`);
        console.log(`   - Atendimentos: ${stats.total_atendimentos} registros`);
        console.log(`   - Logs de acesso: ${stats.total_logs_acesso} registros`);
        console.log(`   - Logs de exclus√£o: ${stats.total_logs_exclusao} registros`);
        console.log(`   - Usu√°rios: ${stats.total_usuarios} registros (MANTIDO)`);
        console.log(`   - Profissionais: ${stats.total_profissionais} registros (MANTIDO)`);
        console.log(`   - Tipos de glosa: ${stats.total_tipos_glosa} registros (MANTIDO)`);
        console.log('');

        // 4. Limpar APENAS as tabelas de dados (preservando configura√ß√µes)
        console.log('üóëÔ∏è LIMPANDO APENAS DADOS OPERACIONAIS...');
        
        // Ordem espec√≠fica para respeitar foreign keys
        const tabelasParaLimpar = [
            { nome: 'logs_exclusao', descricao: 'Logs de exclus√£o' },
            { nome: 'logs_acesso', descricao: 'Logs de acesso' },
            { nome: 'glosas', descricao: 'Glosas das AIHs' },
            { nome: 'movimentacoes', descricao: 'Movimenta√ß√µes das AIHs' },
            { nome: 'atendimentos', descricao: 'Atendimentos das AIHs' },
            { nome: 'aihs', descricao: 'AIHs cadastradas' }
        ];

        let totalRegistrosRemovidos = 0;

        for (const tabela of tabelasParaLimpar) {
            try {
                const antes = await get(`SELECT COUNT(*) as total FROM ${tabela.nome}`);
                await run(`DELETE FROM ${tabela.nome}`);
                console.log(`   ‚úÖ ${tabela.descricao}: ${antes.total} registros removidos`);
                totalRegistrosRemovidos += antes.total;
            } catch (err) {
                console.log(`   ‚ö†Ô∏è ${tabela.nome}: ${err.message}`);
            }
        }

        console.log(`\nüìä Total de registros removidos: ${totalRegistrosRemovidos}`);

        // 5. Resetar auto_increment das tabelas limpas
        console.log('\nüîÑ RESETANDO AUTO_INCREMENT...');
        for (const tabela of tabelasParaLimpar) {
            try {
                await run(`DELETE FROM sqlite_sequence WHERE name = ?`, [tabela.nome]);
                console.log(`   ‚úÖ ${tabela.nome}: Auto-increment resetado para 1`);
            } catch (err) {
                // Ignorar erros (tabela pode n√£o ter auto-increment)
            }
        }

        // 6. Registrar a limpeza nos logs (se houver usu√°rio admin)
        console.log('\nüìù REGISTRANDO LIMPEZA NO LOG...');
        try {
            // Verificar se existe algum usu√°rio administrador
            const admin = await get('SELECT id FROM administradores LIMIT 1');
            if (admin) {
                await run(`
                    INSERT INTO logs_acesso (usuario_id, acao, data_hora) 
                    VALUES (?, 'Limpeza seletiva de dados executada', CURRENT_TIMESTAMP)
                `, [admin.id]);
                console.log('   ‚úÖ Limpeza registrada no log');
            }
        } catch (err) {
            console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel registrar no log:', err.message);
        }

        // 7. Reabilitar foreign keys
        await run('PRAGMA foreign_keys = ON');
        console.log('\nüîí Foreign keys reabilitadas');

        // 8. Verifica√ß√£o final
        console.log('\nüìä VERIFICA√á√ÉO FINAL:');
        const statsFinais = await get(`
            SELECT 
                (SELECT COUNT(*) FROM aihs) as total_aihs,
                (SELECT COUNT(*) FROM movimentacoes) as total_movimentacoes,
                (SELECT COUNT(*) FROM glosas) as total_glosas,
                (SELECT COUNT(*) FROM atendimentos) as total_atendimentos,
                (SELECT COUNT(*) FROM logs_acesso) as total_logs_acesso,
                (SELECT COUNT(*) FROM logs_exclusao) as total_logs_exclusao,
                (SELECT COUNT(*) FROM usuarios) as total_usuarios,
                (SELECT COUNT(*) FROM profissionais) as total_profissionais,
                (SELECT COUNT(*) FROM tipos_glosa) as total_tipos_glosa
        `);
        
        console.log(`   - AIHs: ${statsFinais.total_aihs} registros`);
        console.log(`   - Movimenta√ß√µes: ${statsFinais.total_movimentacoes} registros`);
        console.log(`   - Glosas: ${statsFinais.total_glosas} registros`);
        console.log(`   - Atendimentos: ${statsFinais.total_atendimentos} registros`);
        console.log(`   - Logs de acesso: ${statsFinais.total_logs_acesso} registros`);
        console.log(`   - Logs de exclus√£o: ${statsFinais.total_logs_exclusao} registros`);
        console.log(`   - Usu√°rios: ${statsFinais.total_usuarios} registros (MANTIDOS)`);
        console.log(`   - Profissionais: ${statsFinais.total_profissionais} registros (MANTIDOS)`);
        console.log(`   - Tipos de glosa: ${statsFinais.total_tipos_glosa} registros (MANTIDOS)`);

        // 9. Otimizar banco ap√≥s limpeza
        console.log('\n‚ö° OTIMIZANDO BANCO DE DADOS...');
        await run('VACUUM');
        await run('ANALYZE');
        await run('PRAGMA optimize');
        console.log('   ‚úÖ Banco otimizado');

        // 10. Checkpoint do WAL para limpar arquivos tempor√°rios
        await run('PRAGMA wal_checkpoint(TRUNCATE)');
        console.log('   ‚úÖ Arquivos WAL limpos');

        console.log('\nüéâ LIMPEZA SELETIVA CONCLU√çDA COM SUCESSO!');
        console.log('\nüìã RESUMO:');
        console.log(`   ‚Ä¢ ${totalRegistrosRemovidos} registros de dados removidos`);
        console.log('   ‚Ä¢ Todas as AIHs, movimenta√ß√µes e glosas foram removidas');
        console.log('   ‚Ä¢ Todos os logs foram limpos');
        console.log('   ‚Ä¢ Usu√°rios, profissionais e tipos de glosa foram MANTIDOS');
        console.log('   ‚Ä¢ Backup de seguran√ßa criado antes da limpeza');
        console.log('   ‚Ä¢ Banco otimizado e pronto para novos dados');
        console.log('\n‚ú® Sistema pronto para receber novos dados, mantendo todas as configura√ß√µes!');

        // 11. Mostrar configura√ß√µes mantidas
        console.log('\nüîß CONFIGURA√á√ïES MANTIDAS:');
        
        const usuarios = await all('SELECT nome, matricula FROM usuarios ORDER BY nome');
        console.log(`   üë• Usu√°rios (${usuarios.length}):`);
        usuarios.forEach(u => console.log(`      - ${u.nome} (${u.matricula})`));
        
        const profissionais = await all('SELECT nome, especialidade FROM profissionais ORDER BY especialidade, nome');
        console.log(`   üë®‚Äç‚öïÔ∏è Profissionais (${profissionais.length}):`);
        profissionais.forEach(p => console.log(`      - ${p.nome} (${p.especialidade})`));
        
        const tiposGlosa = await all('SELECT descricao FROM tipos_glosa ORDER BY descricao');
        console.log(`   üìù Tipos de Glosa (${tiposGlosa.length}):`);
        tiposGlosa.forEach(t => console.log(`      - ${t.descricao}`));

    } catch (err) {
        console.error('\n‚ùå ERRO durante a limpeza seletiva:', err);
        console.log('\nüîß Tente executar novamente ou restaure o backup se necess√°rio');
        throw err;
    }
};

// Executar se chamado diretamente
if (require.main === module) {
    limparApenasGlosas()
        .then(() => {
            console.log('\n‚úÖ Limpeza seletiva conclu√≠da com sucesso!');
            process.exit(0);
        })
        .catch((err) => {
            console.error('\n‚ùå Limpeza seletiva falhou:', err);
            process.exit(1);
        });
}

module.exports = { limparApenasGlosas };
